swagger: "2.0"
info:
  version: "1.0.0"
  title: "Book Box Demo Service"
  contact:
    email: "niko@n-k.de"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "localhost"
basePath: "/"
tags:
- name: "books"
  description: "Your BookBox"
schemes:
- "http"
paths:
  /books:
    get:
      tags:
      - "books"
      summary: "Get all books from the box"
      operationId: "getAllBooks"
      security:
      - oauth2: [global]
      produces:
      - "application/json"
      responses:
        200:
          description: "list of all books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
    post:
      tags:
      - "books"
      summary: "Add a new book to the box"
      operationId: "addNewBook"
      parameters:
      - in: "body"
        name: "body"
        description: "Book object that needs to be added to the box"
        required: true
        schema:
          type: "object"
          properties:
            title:
              type: "string"
            author:
              type: "string"
      security:
      - oauth2: [global]
      consumes:
      - "application/json"
      responses:
        201:
          description: "Book was created"
        400:
          description: "Book object format mismatch"
  /books/{bookId}:
    get:
      tags:
      - "books"
      summary: "Get book by id"
      operationId: "getBookById"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of the book to return"
        required: true
        type: "integer"
        format: "int32"
      security:
      - oauth2: [global]
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
    delete:
      tags:
      - "books"
      summary: "Delete book by id"
      operationId: "deleteBookById"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of the book to delete"
        required: true
        type: "integer"
        format: "int32"
      security:
      - oauth2: [global]
      responses:
        204:
          description: "Book has been successfully removed from box"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
securityDefinitions:
  oauth2:
    type: "oauth2"
    authorizationUrl: "http://localhost:8080/auth/realms/demo/protocol/openid-connect/auth"
    tokenUrl: "http://localhost:8080/auth/realms/demo/protocol/openid-connect/token"
    flow: "accessCode"
    scopes:
      global: "global"
definitions:
  Book:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      title:
        type: "string"
      author:
        type: "string"
